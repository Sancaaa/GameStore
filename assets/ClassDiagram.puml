@startuml

skinparam classAttributeIconSize 0
hide circle

'--- External Classes ---
'class List
'class Map
'class Set
'class Date
'class Scanner
'class Exception

'--- Main Classes ---

class Game {
    - gameId: String
    - title: String
    - price: double
    - isFree: boolean
    - genre: String
    + Game(...)
    + getGameId(): String
    + getTitle(): String
    + getPrice(): double
    + isFree(): boolean
    + getGenre(): String
}

class User {
    - username: String
    - password: String
    - role: String
    + User(...)
    + getUsername(): String
    + getPassword(): String
    + getRole(): String
}

class Customer {
    - balance: double
    - gamePassActive: boolean
    - ownedGames: List<Game>
    - activeGamePass: GamePass
    + Customer(...)
    + getBalance(): double
    + setBalance(balance: double)
    + isGamePassActive(): boolean
    + setGamePassActive(active: boolean)
    + getOwnedGames(): List<Game>
    + addOwnedGame(game: Game)
    + getActiveGamePass(): GamePass
    + setActiveGamePass(gamePass: GamePass)
    + hasGame(game: Game): boolean
}

class Admin {
    + Admin(...)
}

class GamePass {
    - passId: String
    - name: String
    - pricePerMonth: double
    - gamesIncluded: List<Game>
    + GamePass(...)
    + getPassId(): String
    + getName(): String
    + getPricePerMonth(): double
    + getGamesIncluded(): List<Game>
    + setPricePerMonth(price: double)
    + addGame(game: Game)
    + removeGame(game: Game)
    + removeGame(gameId: String)
}

class Transaction {
    - transactionId: String
    - user: User
    - date: Date
    - amount: double
    - details: List<TransactionDetail>
    + Transaction(...)
    + addDetail(detail: TransactionDetail)
    + updateAmountFromDetails()
    + getTransactionId(): String
    + getUser(): User
    + getDate(): Date
    + getAmount(): double
    + getDetails(): List<TransactionDetail>
}

class TransactionDetail {
    - itemId: String
    - itemType: String
    - quantity: int
    - price: double
    + TransactionDetail(...)
    + getItemId(): String
    + getItemType(): String
    + getQuantity(): int
    + getPrice(): double
}

class Authenticator {
    - dataManager: DataManager
    + Authenticator(...)
    + authenticate(username: String, password: String): User throws AuthenticationException
}

class AuthenticationException {
    + AuthenticationException(message: String)
}

class MenuManager {
    - scanner: Scanner
    + showMainMenu(...)
    + showAdminMenu(...)
    + showRegistrationMenu(...)
    + showLoginMenu(gameStore: GameStore): User
    + showCustomerMenu(...)
    + showGameCatalog(...)
    + buyGameMenu(...)
    + subscribeGamePassMenu(...)
    + showMyGames(...)
    + topUpBalanceMenu(...)
}

class DataManager {
    - BASE_PATH: String
    - USERS_FILE: String
    - GAMES_FILE: String
    - GAMEPASSES_FILE: String
    - TRANSACTIONS_FILE: String
    - TRANSACTION_DETAILS_FILE: String
    + DataManager()
    + createDataDirectory()
    + loadUsers(): List<User>
    + saveUsers(...)
    + loadGames(): List<Game>
    + saveGames(...)
    + loadGamePass(...): GamePass
    + saveGamePass(...)
    + loadTransactionDetails(): Map<String, List<TransactionDetail>>
    + saveTransactionDetails(...)
    + loadTransactions(): List<Transaction>
    + saveTransactions(...)
    + registerCustomer(...): boolean
    + findUserByUsername(...): User
}

class GameStore {
    - authenticator: Authenticator
    - menuManager: MenuManager
    - dataManager: DataManager
    - paymentManager: PaymentManager
    - currentUser: User
    - games: List<Game>
    - gamePass: GamePass
    - customers: Map<String, Customer>
    - transactions: Set<Transaction>
    + GameStore()
    + run()
    + registerCustomer(...): boolean
    + addGame(...)
    + removeGame(...)
    + setGamePassPrice(...)
    + processTransaction(...)
    + getGamesCatalog(): List<Game>
    + getPaymentManager(): PaymentManager
    + addGameToPass(...)
    + removeGameFromPass(...)
    + updateGamePassPrice(...)
    + getGamePass(): GamePass
    + getAuthenticator(): Authenticator
}

class PaymentManager {
    + processPayment(...): boolean
}

'--- Relationships ---

User <|-- Customer
User <|-- Admin

Transaction "1" *-- "*" TransactionDetail : contains >

GameStore "1" *-- "1" DataManager : manages >
GameStore "1" *-- "1" MenuManager : uses >
GameStore "1" *-- "1" Authenticator : uses >
GameStore "1" *-- "1" PaymentManager : uses >
GameStore "1" -- "*" Game : games >
GameStore "1" -- "1" GamePass : gamePass >
GameStore "1" -- "*" Customer : customers >
GameStore "1" -- "*" Transaction : transactions >

Customer "1" -- "*" Game : ownedGames >
Customer "1" -- "1" GamePass : activeGamePass >

GamePass "1" -- "*" Game : gamesIncluded >

DataManager "1" -- "*" User : loads/saves >
DataManager "1" -- "*" Game : loads/saves >
DataManager "1" -- "1" GamePass : loads/saves >
DataManager "1" -- "*" Transaction : loads/saves >
DataManager "1" -- "*" TransactionDetail : loads/saves >

MenuManager "1" -- "1" GameStore : interacts with >
MenuManager "1" -- "1" Scanner : uses >
MenuManager ..> AuthenticationException : catches

Authenticator --* DataManager : uses
Authenticator --> AuthenticationException : throws
Authenticator -- "*" User : authenticates >

PaymentManager "1" -- "1" Customer : processes payment >

AuthenticationException --|> Exception

@enduml
