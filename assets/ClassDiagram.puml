' Class Diagam


@startuml

skinparam classAttributeIconSize 0
hide circle

' --- Classes ---

class Game {
    - gameId: String
    - title: String
    - price: double
    - isFree: boolean
    - genre: String
    + Game(String, String, double, boolean, String)
    + getGameId(): String
    + getTitle(): String
    + getPrice(): double
    + isFree(): boolean
    + getGenre(): String
}

class User {
    - username: String
    - password: String
    - role: String
    + User(String, String, String)
    + getUsername(): String
    + getPassword(): String
    + getRole(): String
}

class Customer {
    - balance: double
    - gamePassActive: boolean
    - ownedGames: List<Game>
    - activeGamePass: GamePass
    + Customer(String, String, double)
    + getBalance(): double
    + setBalance(double)
    + isGamePassActive(): boolean
    + setGamePassActive(boolean)
    + getOwnedGames(): List<Game>
    + addOwnedGame(Game)
    + getActiveGamePass(): GamePass
    + setActiveGamePass(GamePass)
    + hasGame(Game): boolean
}

class Admin {
    + Admin(String, String)
}

class GamePass {
    - passId: String
    - name: String
    - pricePerMonth: double
    - gamesIncluded: List<Game>
    + GamePass(String, String, double)
    + GamePass(String, String, double, List<Game>)
    + getPassId(): String
    + getName(): String
    + getPricePerMonth(): double
    + getGamesIncluded(): List<Game>
    + setPricePerMonth(double)
    + addGame(Game)
    + removeGame(Game)
    + removeGame(String)
}

class Transaction {
    - transactionId: String
    - user: User
    - date: Date
    - amount: double
    - details: List<TransactionDetail>
    + Transaction(String, User, double, Date)
    + addDetail(TransactionDetail)
    + updateAmountFromDetails()
    + getTransactionId(): String
    + getUser(): User
    + getDate(): Date
    + getAmount(): double
    + getDetails(): List<TransactionDetail>
}

class TransactionDetail {
    - itemId: String
    - itemType: String
    - quantity: int
    - price: double
    + TransactionDetail(String, String, int, double)
    + getItemId(): String
    + getItemType(): String
    + getQuantity(): int
    + getPrice(): double
}

class Authenticator {
    - dataManager: DataManager
    + Authenticator(DataManager)
    + authenticate(String, String): User throws AuthenticationException
}

class AuthenticationException {
    + AuthenticationException(String)
}

class MenuManager {
    - scanner: Scanner
    + showMainMenu(GameStore)
    + showAdminMenu(Admin, GameStore)
    + showRegistrationMenu(GameStore)
    + showLoginMenu(GameStore): User
    + showCustomerMenu(Customer, GameStore)
    + showGameCatalog(List<Game>, Scanner)
    + buyGameMenu(Customer, GameStore)
    + subscribeGamePassMenu(Customer, GameStore)
    + showMyGames(Customer, Scanner)
    + topUpBalanceMenu(Customer, GameStore)
    + addGameMenu(GameStore)
    + removeGameMenu(GameStore)
    + addGameToPassMenu(GameStore)
    + removeGameFromPassMenu(GameStore)
    + updateGamePassPriceMenu(GameStore)
    - readInt(String): int
    - readIntInRange(int, int, String): int
    - readDouble(String): double
    - readNonEmptyString(String): String
    - readBoolean(String): boolean
    - clearScreen()
    - printSeparator()
    - printHeader(String)
    - pressEnterToContinue(Scanner)
    - findGameInCatalog(GameStore, String): Game
    - findGameInGamePass(GamePass, String): Game
    + showExitMenu()
}

class DataManager {
    - BASE_PATH: String
    - USERS_FILE: String
    - GAMES_FILE: String
    - GAMEPASSES_FILE: String
    - TRANSACTIONS_FILE: String
    - TRANSACTION_DETAILS_FILE: String
    - CUSTOMER_GAMES_FILE: String
    - CUSTOMER_GAMEPASS_FILE: String
    + DataManager()
    - createDataDirectory()
    + loadUsers(): List<User>
    + saveUsers(List<User>)
    + loadGames(): List<Game>
    + saveGames(List<Game>)
    + loadGamePass(List<Game>): GamePass
    + saveGamePass(GamePass)
    + loadTransactionDetails(): Map<String, List<TransactionDetail>>
    + saveTransactionDetails(List<Transaction>)
    + loadTransactions(): List<Transaction>
    + saveTransactions(List<Transaction>)
    + registerCustomer(String, String): boolean
    - findUserByUsername(String): User
    - loadCustomerGames(Customer)
    - saveCustomerGames(Customer)
    - loadCustomerGamePass(Customer)
    - saveCustomerGamePass(Customer)
    - findGameById(String): Game
}

class GameStore {
    - authenticator: Authenticator
    - menuManager: MenuManager
    - dataManager: DataManager
    - paymentManager: PaymentManager
    - currentUser: User
    - games: List<Game>
    - gamePass: GamePass
    - customers: Map<String, Customer>
    - transactions: Set<Transaction>
    + GameStore()
    + run()
    + registerCustomer(String, String): boolean
    + addGame(Game)
    + removeGame(String)
    + setGamePassPrice(double)
    + processTransaction(Transaction)
    + getGamesCatalog(): List<Game>
    + getPaymentManager(): PaymentManager
    + addGameToPass(Game)
    + removeGameFromPass(String)
    + updateGamePassPrice(double)
    + getGamePass(): GamePass
    + getAuthenticator(): Authenticator
    - loadInitialData()
    - saveAllData()
    - loadCustomersData()
    + saveCustomerData(Customer)
}

class PaymentManager {
    + processPayment(Customer, double): boolean
}

class Main {
    + main(String[])
}

' --- Relationships ---

User <|-- Customer
User <|-- Admin

Transaction "1" *-- "*" TransactionDetail : details >

GameStore "1" *-- "1" DataManager : dataManager >
GameStore "1" *-- "1" MenuManager : menuManager >
GameStore "1" *-- "1" Authenticator : authenticator >
GameStore "1" *-- "1" PaymentManager : paymentManager >
GameStore "1" o-- "*" Game : games >
GameStore "1" o-- "1" GamePass : gamePass >
GameStore "1" o-- "*" Customer : customers >
GameStore "1" o-- "*" Transaction : transactions >

Customer "1" *-- "*" Game : ownedGames >
Customer "1" *-- "0..1" GamePass : activeGamePass >

GamePass "1" *-- "*" Game : gamesIncluded >

DataManager "1" -- "*" User : manages >
DataManager "1" -- "*" Game : manages >
DataManager "1" -- "0..1" GamePass : manages >
DataManager "1" -- "*" Transaction : manages >
DataManager "1" -- "*" TransactionDetail : manages >

Authenticator --* DataManager : dataManager >
Authenticator ..> AuthenticationException : throws

MenuManager -- GameStore
MenuManager -- Scanner

PaymentManager -- Customer

Main --> GameStore

@enduml